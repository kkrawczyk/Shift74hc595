
ShiftOutTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000140  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  000001b4  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a3 36       	cpi	r26, 0x63	; 99
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	7c d0       	rcall	.+248    	; 0x134 <main>
  3c:	7f c0       	rjmp	.+254    	; 0x13c <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <getNthByte>:
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	30 e0       	ldi	r19, 0x00	; 0
  44:	06 2e       	mov	r0, r22
  46:	01 c0       	rjmp	.+2      	; 0x4a <getNthByte+0xa>
  48:	22 0f       	add	r18, r18
  4a:	0a 94       	dec	r0
  4c:	ea f7       	brpl	.-6      	; 0x48 <getNthByte+0x8>
  4e:	82 23       	and	r24, r18
  50:	90 e0       	ldi	r25, 0x00	; 0
  52:	02 c0       	rjmp	.+4      	; 0x58 <getNthByte+0x18>
  54:	95 95       	asr	r25
  56:	87 95       	ror	r24
  58:	6a 95       	dec	r22
  5a:	e2 f7       	brpl	.-8      	; 0x54 <getNthByte+0x14>
  5c:	08 95       	ret

0000005e <setNthByteHigh>:
  5e:	21 e0       	ldi	r18, 0x01	; 1
  60:	30 e0       	ldi	r19, 0x00	; 0
  62:	06 2e       	mov	r0, r22
  64:	01 c0       	rjmp	.+2      	; 0x68 <setNthByteHigh+0xa>
  66:	22 0f       	add	r18, r18
  68:	0a 94       	dec	r0
  6a:	ea f7       	brpl	.-6      	; 0x66 <setNthByteHigh+0x8>
  6c:	fc 01       	movw	r30, r24
  6e:	30 81       	ld	r19, Z
  70:	32 2b       	or	r19, r18
  72:	30 83       	st	Z, r19
  74:	08 95       	ret

00000076 <setNthByteLow>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	30 e0       	ldi	r19, 0x00	; 0
  7a:	06 2e       	mov	r0, r22
  7c:	01 c0       	rjmp	.+2      	; 0x80 <setNthByteLow+0xa>
  7e:	22 0f       	add	r18, r18
  80:	0a 94       	dec	r0
  82:	ea f7       	brpl	.-6      	; 0x7e <setNthByteLow+0x8>
  84:	20 95       	com	r18
  86:	fc 01       	movw	r30, r24
  88:	30 81       	ld	r19, Z
  8a:	32 23       	and	r19, r18
  8c:	30 83       	st	Z, r19
  8e:	08 95       	ret

00000090 <setLcdFunctions>:
  90:	90 91 60 00 	lds	r25, 0x0060
  94:	98 2b       	or	r25, r24
  96:	90 93 60 00 	sts	0x0060, r25
  9a:	08 95       	ret

0000009c <setLcdPin>:
  9c:	61 11       	cpse	r22, r1
  9e:	05 c0       	rjmp	.+10     	; 0xaa <setLcdPin+0xe>
  a0:	68 2f       	mov	r22, r24
  a2:	82 e6       	ldi	r24, 0x62	; 98
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	e7 df       	rcall	.-50     	; 0x76 <setNthByteLow>
  a8:	04 c0       	rjmp	.+8      	; 0xb2 <setLcdPin+0x16>
  aa:	68 2f       	mov	r22, r24
  ac:	82 e6       	ldi	r24, 0x62	; 98
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	d6 df       	rcall	.-84     	; 0x5e <setNthByteHigh>
  b2:	80 91 62 00 	lds	r24, 0x0062
  b6:	3c c0       	rjmp	.+120    	; 0x130 <writeBytes>

000000b8 <initLcd>:
  b8:	17 d0       	rcall	.+46     	; 0xe8 <initShift>
  ba:	10 92 60 00 	sts	0x0060, r1
  be:	10 92 62 00 	sts	0x0062, r1
  c2:	10 92 61 00 	sts	0x0061, r1
  c6:	88 e0       	ldi	r24, 0x08	; 8
  c8:	e3 df       	rcall	.-58     	; 0x90 <setLcdFunctions>
  ca:	8f e2       	ldi	r24, 0x2F	; 47
  cc:	95 e7       	ldi	r25, 0x75	; 117
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <initLcd+0x16>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <initLcd+0x1c>
  d4:	00 00       	nop
  d6:	60 e0       	ldi	r22, 0x00	; 0
  d8:	87 e0       	ldi	r24, 0x07	; 7
  da:	e0 df       	rcall	.-64     	; 0x9c <setLcdPin>
  dc:	60 e0       	ldi	r22, 0x00	; 0
  de:	86 e0       	ldi	r24, 0x06	; 6
  e0:	dd df       	rcall	.-70     	; 0x9c <setLcdPin>
  e2:	60 e0       	ldi	r22, 0x00	; 0
  e4:	85 e0       	ldi	r24, 0x05	; 5
  e6:	da cf       	rjmp	.-76     	; 0x9c <setLcdPin>

000000e8 <initShift>:
  e8:	b8 9a       	sbi	0x17, 0	; 23
  ea:	b9 9a       	sbi	0x17, 1	; 23
  ec:	ba 9a       	sbi	0x17, 2	; 23
  ee:	c0 98       	cbi	0x18, 0	; 24
  f0:	c1 98       	cbi	0x18, 1	; 24
  f2:	c2 98       	cbi	0x18, 2	; 24
  f4:	08 95       	ret

000000f6 <writeBytesRCLK>:
  f6:	1f 93       	push	r17
  f8:	cf 93       	push	r28
  fa:	df 93       	push	r29
  fc:	18 2f       	mov	r17, r24
  fe:	d6 2f       	mov	r29, r22
 100:	61 30       	cpi	r22, 0x01	; 1
 102:	09 f4       	brne	.+2      	; 0x106 <writeBytesRCLK+0x10>
 104:	c0 98       	cbi	0x18, 0	; 24
 106:	c0 e0       	ldi	r28, 0x00	; 0
 108:	c1 98       	cbi	0x18, 1	; 24
 10a:	6c 2f       	mov	r22, r28
 10c:	81 2f       	mov	r24, r17
 10e:	98 df       	rcall	.-208    	; 0x40 <getNthByte>
 110:	81 11       	cpse	r24, r1
 112:	02 c0       	rjmp	.+4      	; 0x118 <writeBytesRCLK+0x22>
 114:	c2 98       	cbi	0x18, 2	; 24
 116:	01 c0       	rjmp	.+2      	; 0x11a <writeBytesRCLK+0x24>
 118:	c2 9a       	sbi	0x18, 2	; 24
 11a:	c1 9a       	sbi	0x18, 1	; 24
 11c:	cf 5f       	subi	r28, 0xFF	; 255
 11e:	c8 30       	cpi	r28, 0x08	; 8
 120:	99 f7       	brne	.-26     	; 0x108 <writeBytesRCLK+0x12>
 122:	d1 30       	cpi	r29, 0x01	; 1
 124:	09 f4       	brne	.+2      	; 0x128 <writeBytesRCLK+0x32>
 126:	c0 9a       	sbi	0x18, 0	; 24
 128:	df 91       	pop	r29
 12a:	cf 91       	pop	r28
 12c:	1f 91       	pop	r17
 12e:	08 95       	ret

00000130 <writeBytes>:
 130:	61 e0       	ldi	r22, 0x01	; 1
 132:	e1 cf       	rjmp	.-62     	; 0xf6 <writeBytesRCLK>

00000134 <main>:
 134:	c1 df       	rcall	.-126    	; 0xb8 <initLcd>
 136:	80 e0       	ldi	r24, 0x00	; 0
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	08 95       	ret

0000013c <_exit>:
 13c:	f8 94       	cli

0000013e <__stop_program>:
 13e:	ff cf       	rjmp	.-2      	; 0x13e <__stop_program>
