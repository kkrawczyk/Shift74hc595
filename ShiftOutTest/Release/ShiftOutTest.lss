
ShiftOutTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000248  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000005  00800060  00800060  000002bc  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 e4       	ldi	r30, 0x48	; 72
  32:	f2 e0       	ldi	r31, 0x02	; 2
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 36       	cpi	r26, 0x60	; 96
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a5 36       	cpi	r26, 0x65	; 101
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	f6 d0       	rcall	.+492    	; 0x23e <main>
  52:	f8 c0       	rjmp	.+496    	; 0x244 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <getNthByte>:
  56:	21 e0       	ldi	r18, 0x01	; 1
  58:	30 e0       	ldi	r19, 0x00	; 0
  5a:	06 2e       	mov	r0, r22
  5c:	01 c0       	rjmp	.+2      	; 0x60 <getNthByte+0xa>
  5e:	22 0f       	add	r18, r18
  60:	0a 94       	dec	r0
  62:	ea f7       	brpl	.-6      	; 0x5e <getNthByte+0x8>
  64:	82 23       	and	r24, r18
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	02 c0       	rjmp	.+4      	; 0x6e <getNthByte+0x18>
  6a:	95 95       	asr	r25
  6c:	87 95       	ror	r24
  6e:	6a 95       	dec	r22
  70:	e2 f7       	brpl	.-8      	; 0x6a <getNthByte+0x14>
  72:	08 95       	ret

00000074 <setNthByteHigh>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	06 2e       	mov	r0, r22
  7a:	01 c0       	rjmp	.+2      	; 0x7e <setNthByteHigh+0xa>
  7c:	22 0f       	add	r18, r18
  7e:	0a 94       	dec	r0
  80:	ea f7       	brpl	.-6      	; 0x7c <setNthByteHigh+0x8>
  82:	fc 01       	movw	r30, r24
  84:	30 81       	ld	r19, Z
  86:	32 2b       	or	r19, r18
  88:	30 83       	st	Z, r19
  8a:	08 95       	ret

0000008c <setNthByteLow>:
  8c:	21 e0       	ldi	r18, 0x01	; 1
  8e:	30 e0       	ldi	r19, 0x00	; 0
  90:	06 2e       	mov	r0, r22
  92:	01 c0       	rjmp	.+2      	; 0x96 <setNthByteLow+0xa>
  94:	22 0f       	add	r18, r18
  96:	0a 94       	dec	r0
  98:	ea f7       	brpl	.-6      	; 0x94 <setNthByteLow+0x8>
  9a:	20 95       	com	r18
  9c:	fc 01       	movw	r30, r24
  9e:	30 81       	ld	r19, Z
  a0:	32 23       	and	r19, r18
  a2:	30 83       	st	Z, r19
  a4:	08 95       	ret

000000a6 <setLcdFunctions>:
  a6:	90 91 61 00 	lds	r25, 0x0061
  aa:	98 2b       	or	r25, r24
  ac:	90 93 61 00 	sts	0x0061, r25
  b0:	08 95       	ret

000000b2 <setLcdPin>:
  b2:	61 11       	cpse	r22, r1
  b4:	05 c0       	rjmp	.+10     	; 0xc0 <setLcdPin+0xe>
  b6:	68 2f       	mov	r22, r24
  b8:	83 e6       	ldi	r24, 0x63	; 99
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	e7 df       	rcall	.-50     	; 0x8c <setNthByteLow>
  be:	04 c0       	rjmp	.+8      	; 0xc8 <setLcdPin+0x16>
  c0:	68 2f       	mov	r22, r24
  c2:	83 e6       	ldi	r24, 0x63	; 99
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	d6 df       	rcall	.-84     	; 0x74 <setNthByteHigh>
  c8:	80 91 63 00 	lds	r24, 0x0063
  cc:	b6 c0       	rjmp	.+364    	; 0x23a <writeBytes>

000000ce <lcdPulseEnable>:
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	85 e0       	ldi	r24, 0x05	; 5
  d2:	ef df       	rcall	.-34     	; 0xb2 <setLcdPin>
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <lcdPulseEnable+0x8>
  d6:	61 e0       	ldi	r22, 0x01	; 1
  d8:	85 e0       	ldi	r24, 0x05	; 5
  da:	eb df       	rcall	.-42     	; 0xb2 <setLcdPin>
  dc:	00 c0       	rjmp	.+0      	; 0xde <lcdPulseEnable+0x10>
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	85 e0       	ldi	r24, 0x05	; 5
  e2:	e7 df       	rcall	.-50     	; 0xb2 <setLcdPin>
  e4:	88 e2       	ldi	r24, 0x28	; 40
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <lcdPulseEnable+0x18>
  ea:	00 00       	nop
  ec:	08 95       	ret

000000ee <lcdWrite4Bits>:
  ee:	0f 93       	push	r16
  f0:	1f 93       	push	r17
  f2:	cf 93       	push	r28
  f4:	df 93       	push	r29
  f6:	c8 2f       	mov	r28, r24
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	ad df       	rcall	.-166    	; 0x56 <getNthByte>
  fc:	08 2f       	mov	r16, r24
  fe:	61 e0       	ldi	r22, 0x01	; 1
 100:	8c 2f       	mov	r24, r28
 102:	a9 df       	rcall	.-174    	; 0x56 <getNthByte>
 104:	18 2f       	mov	r17, r24
 106:	62 e0       	ldi	r22, 0x02	; 2
 108:	8c 2f       	mov	r24, r28
 10a:	a5 df       	rcall	.-182    	; 0x56 <getNthByte>
 10c:	d8 2f       	mov	r29, r24
 10e:	63 e0       	ldi	r22, 0x03	; 3
 110:	8c 2f       	mov	r24, r28
 112:	a1 df       	rcall	.-190    	; 0x56 <getNthByte>
 114:	c8 2f       	mov	r28, r24
 116:	60 2f       	mov	r22, r16
 118:	84 e0       	ldi	r24, 0x04	; 4
 11a:	cb df       	rcall	.-106    	; 0xb2 <setLcdPin>
 11c:	61 2f       	mov	r22, r17
 11e:	83 e0       	ldi	r24, 0x03	; 3
 120:	c8 df       	rcall	.-112    	; 0xb2 <setLcdPin>
 122:	6d 2f       	mov	r22, r29
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	c5 df       	rcall	.-118    	; 0xb2 <setLcdPin>
 128:	6c 2f       	mov	r22, r28
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	c2 df       	rcall	.-124    	; 0xb2 <setLcdPin>
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	cb cf       	rjmp	.-106    	; 0xce <lcdPulseEnable>

00000138 <lcdSend>:
 138:	cf 93       	push	r28
 13a:	c8 2f       	mov	r28, r24
 13c:	87 e0       	ldi	r24, 0x07	; 7
 13e:	b9 df       	rcall	.-142    	; 0xb2 <setLcdPin>
 140:	60 e0       	ldi	r22, 0x00	; 0
 142:	86 e0       	ldi	r24, 0x06	; 6
 144:	b6 df       	rcall	.-148    	; 0xb2 <setLcdPin>
 146:	8c 2f       	mov	r24, r28
 148:	82 95       	swap	r24
 14a:	8f 70       	andi	r24, 0x0F	; 15
 14c:	d0 df       	rcall	.-96     	; 0xee <lcdWrite4Bits>
 14e:	8c 2f       	mov	r24, r28
 150:	cf 91       	pop	r28
 152:	cd cf       	rjmp	.-102    	; 0xee <lcdWrite4Bits>

00000154 <lcdCommand>:
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	f0 cf       	rjmp	.-32     	; 0x138 <lcdSend>

00000158 <lcdClear>:
 158:	81 e0       	ldi	r24, 0x01	; 1
 15a:	fc df       	rcall	.-8      	; 0x154 <lcdCommand>
 15c:	87 e5       	ldi	r24, 0x57	; 87
 15e:	92 e0       	ldi	r25, 0x02	; 2
 160:	01 97       	sbiw	r24, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <__stack+0x1>
 164:	00 c0       	rjmp	.+0      	; 0x166 <__stack+0x7>
 166:	00 00       	nop
 168:	08 95       	ret

0000016a <lcdDisplay>:
 16a:	80 91 64 00 	lds	r24, 0x0064
 16e:	98 2f       	mov	r25, r24
 170:	94 60       	ori	r25, 0x04	; 4
 172:	90 93 64 00 	sts	0x0064, r25
 176:	8c 60       	ori	r24, 0x0C	; 12
 178:	ed cf       	rjmp	.-38     	; 0x154 <lcdCommand>

0000017a <lcdSendOnly4>:
 17a:	cf 93       	push	r28
 17c:	c8 2f       	mov	r28, r24
 17e:	87 e0       	ldi	r24, 0x07	; 7
 180:	98 df       	rcall	.-208    	; 0xb2 <setLcdPin>
 182:	60 e0       	ldi	r22, 0x00	; 0
 184:	86 e0       	ldi	r24, 0x06	; 6
 186:	95 df       	rcall	.-214    	; 0xb2 <setLcdPin>
 188:	8c 2f       	mov	r24, r28
 18a:	82 95       	swap	r24
 18c:	8f 70       	andi	r24, 0x0F	; 15
 18e:	cf 91       	pop	r28
 190:	ae cf       	rjmp	.-164    	; 0xee <lcdWrite4Bits>

00000192 <lcdCommand4bit>:
 192:	60 e0       	ldi	r22, 0x00	; 0
 194:	f2 cf       	rjmp	.-28     	; 0x17a <lcdSendOnly4>

00000196 <initLcd>:
 196:	2d d0       	rcall	.+90     	; 0x1f2 <initShift>
 198:	10 92 61 00 	sts	0x0061, r1
 19c:	86 e0       	ldi	r24, 0x06	; 6
 19e:	80 93 64 00 	sts	0x0064, r24
 1a2:	82 e0       	ldi	r24, 0x02	; 2
 1a4:	80 93 60 00 	sts	0x0060, r24
 1a8:	10 92 63 00 	sts	0x0063, r1
 1ac:	10 92 62 00 	sts	0x0062, r1
 1b0:	8f e2       	ldi	r24, 0x2F	; 47
 1b2:	95 e7       	ldi	r25, 0x75	; 117
 1b4:	01 97       	sbiw	r24, 0x01	; 1
 1b6:	f1 f7       	brne	.-4      	; 0x1b4 <initLcd+0x1e>
 1b8:	00 c0       	rjmp	.+0      	; 0x1ba <initLcd+0x24>
 1ba:	00 00       	nop
 1bc:	60 e0       	ldi	r22, 0x00	; 0
 1be:	87 e0       	ldi	r24, 0x07	; 7
 1c0:	78 df       	rcall	.-272    	; 0xb2 <setLcdPin>
 1c2:	60 e0       	ldi	r22, 0x00	; 0
 1c4:	86 e0       	ldi	r24, 0x06	; 6
 1c6:	75 df       	rcall	.-278    	; 0xb2 <setLcdPin>
 1c8:	60 e0       	ldi	r22, 0x00	; 0
 1ca:	85 e0       	ldi	r24, 0x05	; 5
 1cc:	72 df       	rcall	.-284    	; 0xb2 <setLcdPin>
 1ce:	8f e5       	ldi	r24, 0x5F	; 95
 1d0:	9a ee       	ldi	r25, 0xEA	; 234
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <initLcd+0x3c>
 1d6:	00 c0       	rjmp	.+0      	; 0x1d8 <initLcd+0x42>
 1d8:	00 00       	nop
 1da:	80 91 61 00 	lds	r24, 0x0061
 1de:	80 62       	ori	r24, 0x20	; 32
 1e0:	d8 df       	rcall	.-80     	; 0x192 <lcdCommand4bit>
 1e2:	88 e0       	ldi	r24, 0x08	; 8
 1e4:	60 df       	rcall	.-320    	; 0xa6 <setLcdFunctions>
 1e6:	80 91 61 00 	lds	r24, 0x0061
 1ea:	80 62       	ori	r24, 0x20	; 32
 1ec:	b3 df       	rcall	.-154    	; 0x154 <lcdCommand>
 1ee:	bd df       	rcall	.-134    	; 0x16a <lcdDisplay>
 1f0:	b3 cf       	rjmp	.-154    	; 0x158 <lcdClear>

000001f2 <initShift>:
 1f2:	b8 9a       	sbi	0x17, 0	; 23
 1f4:	b9 9a       	sbi	0x17, 1	; 23
 1f6:	ba 9a       	sbi	0x17, 2	; 23
 1f8:	c0 98       	cbi	0x18, 0	; 24
 1fa:	c1 98       	cbi	0x18, 1	; 24
 1fc:	c2 98       	cbi	0x18, 2	; 24
 1fe:	08 95       	ret

00000200 <writeBytesRCLK>:
 200:	1f 93       	push	r17
 202:	cf 93       	push	r28
 204:	df 93       	push	r29
 206:	18 2f       	mov	r17, r24
 208:	d6 2f       	mov	r29, r22
 20a:	61 30       	cpi	r22, 0x01	; 1
 20c:	09 f4       	brne	.+2      	; 0x210 <writeBytesRCLK+0x10>
 20e:	c0 98       	cbi	0x18, 0	; 24
 210:	c0 e0       	ldi	r28, 0x00	; 0
 212:	c1 98       	cbi	0x18, 1	; 24
 214:	6c 2f       	mov	r22, r28
 216:	81 2f       	mov	r24, r17
 218:	1e df       	rcall	.-452    	; 0x56 <getNthByte>
 21a:	81 11       	cpse	r24, r1
 21c:	02 c0       	rjmp	.+4      	; 0x222 <writeBytesRCLK+0x22>
 21e:	c2 98       	cbi	0x18, 2	; 24
 220:	01 c0       	rjmp	.+2      	; 0x224 <writeBytesRCLK+0x24>
 222:	c2 9a       	sbi	0x18, 2	; 24
 224:	c1 9a       	sbi	0x18, 1	; 24
 226:	cf 5f       	subi	r28, 0xFF	; 255
 228:	c8 30       	cpi	r28, 0x08	; 8
 22a:	99 f7       	brne	.-26     	; 0x212 <writeBytesRCLK+0x12>
 22c:	d1 30       	cpi	r29, 0x01	; 1
 22e:	09 f4       	brne	.+2      	; 0x232 <writeBytesRCLK+0x32>
 230:	c0 9a       	sbi	0x18, 0	; 24
 232:	df 91       	pop	r29
 234:	cf 91       	pop	r28
 236:	1f 91       	pop	r17
 238:	08 95       	ret

0000023a <writeBytes>:
 23a:	61 e0       	ldi	r22, 0x01	; 1
 23c:	e1 cf       	rjmp	.-62     	; 0x200 <writeBytesRCLK>

0000023e <main>:
 23e:	ab df       	rcall	.-170    	; 0x196 <initLcd>
 240:	00 00       	nop
 242:	fe cf       	rjmp	.-4      	; 0x240 <main+0x2>

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
