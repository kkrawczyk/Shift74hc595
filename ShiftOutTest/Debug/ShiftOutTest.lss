
ShiftOutTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000318  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000318  000003ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .eeprom       00000001  00810000  00810000  000003b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .comment      00000030  00000000  00000000  000003b1  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000003e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000326  00000000  00000000  00000429  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000235  00000000  00000000  0000074f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000029e  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000058  00000000  00000000  00000c24  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001e9  00000000  00000000  00000c7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000053  00000000  00000000  00000e65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00000eb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	20 c0       	rjmp	.+64     	; 0x44 <__bad_interrupt>
   4:	1f c0       	rjmp	.+62     	; 0x44 <__bad_interrupt>
   6:	1e c0       	rjmp	.+60     	; 0x44 <__bad_interrupt>
   8:	1d c0       	rjmp	.+58     	; 0x44 <__bad_interrupt>
   a:	1c c0       	rjmp	.+56     	; 0x44 <__bad_interrupt>
   c:	1b c0       	rjmp	.+54     	; 0x44 <__bad_interrupt>
   e:	1a c0       	rjmp	.+52     	; 0x44 <__bad_interrupt>
  10:	19 c0       	rjmp	.+50     	; 0x44 <__bad_interrupt>
  12:	18 c0       	rjmp	.+48     	; 0x44 <__bad_interrupt>
  14:	17 c0       	rjmp	.+46     	; 0x44 <__bad_interrupt>
  16:	16 c0       	rjmp	.+44     	; 0x44 <__bad_interrupt>
  18:	15 c0       	rjmp	.+42     	; 0x44 <__bad_interrupt>
  1a:	14 c0       	rjmp	.+40     	; 0x44 <__bad_interrupt>
  1c:	13 c0       	rjmp	.+38     	; 0x44 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 e1       	ldi	r30, 0x18	; 24
  32:	f3 e0       	ldi	r31, 0x03	; 3
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a4 36       	cpi	r26, 0x64	; 100
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>
  40:	22 d0       	rcall	.+68     	; 0x86 <main>
  42:	68 c1       	rjmp	.+720    	; 0x314 <_exit>

00000044 <__bad_interrupt>:
  44:	dd cf       	rjmp	.-70     	; 0x0 <__vectors>

00000046 <getNthByte>:
 */ 

#include "ByteOperations.h"

uint8_t getNthByte(uint8_t number, uint8_t bit){
	uint8_t masked_n = number & (1 << bit);
  46:	21 e0       	ldi	r18, 0x01	; 1
  48:	30 e0       	ldi	r19, 0x00	; 0
  4a:	06 2e       	mov	r0, r22
  4c:	02 c0       	rjmp	.+4      	; 0x52 <getNthByte+0xc>
  4e:	22 0f       	add	r18, r18
  50:	33 1f       	adc	r19, r19
  52:	0a 94       	dec	r0
  54:	e2 f7       	brpl	.-8      	; 0x4e <getNthByte+0x8>
  56:	82 23       	and	r24, r18
	return masked_n >> bit;
  58:	28 2f       	mov	r18, r24
  5a:	30 e0       	ldi	r19, 0x00	; 0
  5c:	c9 01       	movw	r24, r18
  5e:	02 c0       	rjmp	.+4      	; 0x64 <getNthByte+0x1e>
  60:	95 95       	asr	r25
  62:	87 95       	ror	r24
  64:	6a 95       	dec	r22
  66:	e2 f7       	brpl	.-8      	; 0x60 <getNthByte+0x1a>
  68:	08 95       	ret

0000006a <initRand>:
void initRand(void)
{
	uint8_t state;
	static uint8_t EEMEM sstate;

	state = eeprom_read_byte(&sstate);
  6a:	80 e0       	ldi	r24, 0x00	; 0
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	7c d0       	rcall	.+248    	; 0x168 <__eerd_byte_tn45>

	// Check if it's unwritten EEPROM (first time). Use something funny
	// in that case.
	if (state == 0xff)
  70:	8f 3f       	cpi	r24, 0xFF	; 255
  72:	09 f4       	brne	.+2      	; 0x76 <initRand+0xc>
	state = 0xAA;
  74:	8a ea       	ldi	r24, 0xAA	; 170
	srand(state);
  76:	90 e0       	ldi	r25, 0x00	; 0
  78:	6c d0       	rcall	.+216    	; 0x152 <srand>
	eeprom_write_byte(&sstate, rand());
  7a:	67 d0       	rcall	.+206    	; 0x14a <rand>
  7c:	68 2f       	mov	r22, r24
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	7a d0       	rcall	.+244    	; 0x178 <__eewr_byte_tn45>
  84:	08 95       	ret

00000086 <main>:
}

int main(void)
{
	initRand();
  86:	f1 df       	rcall	.-30     	; 0x6a <initRand>
	DDRB |= (1 << PB0); // latch
  88:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= (1 << PB1); // clock
  8a:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= (1 << PB2); // data
  8c:	ba 9a       	sbi	0x17, 2	; 23
	while(1)
	{
		PORTB &= ~(1 << PB0);
		for(uint8_t i=0;i<=8;i++){
  8e:	d0 e0       	ldi	r29, 0x00	; 0
	DDRB |= (1 << PB0); // latch
	DDRB |= (1 << PB1); // clock
	DDRB |= (1 << PB2); // data
	while(1)
	{
		PORTB &= ~(1 << PB0);
  90:	c0 98       	cbi	0x18, 0	; 24
		for(uint8_t i=0;i<=8;i++){
  92:	cd 2f       	mov	r28, r29
			PORTB &= ~(1 << PB1);
  94:	c1 98       	cbi	0x18, 1	; 24
			uint8_t tmp = getNthByte(7,i);
  96:	6c 2f       	mov	r22, r28
  98:	87 e0       	ldi	r24, 0x07	; 7
  9a:	d5 df       	rcall	.-86     	; 0x46 <getNthByte>
			if(getNthByte(7,i)==0){
  9c:	6c 2f       	mov	r22, r28
  9e:	87 e0       	ldi	r24, 0x07	; 7
  a0:	d2 df       	rcall	.-92     	; 0x46 <getNthByte>
  a2:	81 11       	cpse	r24, r1
  a4:	02 c0       	rjmp	.+4      	; 0xaa <main+0x24>
				PORTB &= ~(1 << PB2);
  a6:	c2 98       	cbi	0x18, 2	; 24
  a8:	01 c0       	rjmp	.+2      	; 0xac <main+0x26>
				}else{
				PORTB |= (1 << PB2);
  aa:	c2 9a       	sbi	0x18, 2	; 24
			}
			PORTB |= (1 << PB1);
  ac:	c1 9a       	sbi	0x18, 1	; 24
	DDRB |= (1 << PB1); // clock
	DDRB |= (1 << PB2); // data
	while(1)
	{
		PORTB &= ~(1 << PB0);
		for(uint8_t i=0;i<=8;i++){
  ae:	cf 5f       	subi	r28, 0xFF	; 255
  b0:	c9 30       	cpi	r28, 0x09	; 9
  b2:	81 f7       	brne	.-32     	; 0x94 <main+0xe>
				}else{
				PORTB |= (1 << PB2);
			}
			PORTB |= (1 << PB1);
		}
		PORTB |= (1 << PB0);
  b4:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b6:	2f e7       	ldi	r18, 0x7F	; 127
  b8:	89 ea       	ldi	r24, 0xA9	; 169
  ba:	93 e0       	ldi	r25, 0x03	; 3
  bc:	21 50       	subi	r18, 0x01	; 1
  be:	80 40       	sbci	r24, 0x00	; 0
  c0:	90 40       	sbci	r25, 0x00	; 0
  c2:	e1 f7       	brne	.-8      	; 0xbc <main+0x36>
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <main+0x40>
  c6:	00 00       	nop
  c8:	e3 cf       	rjmp	.-58     	; 0x90 <main+0xa>

000000ca <do_rand>:
  ca:	a0 e0       	ldi	r26, 0x00	; 0
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	ea e6       	ldi	r30, 0x6A	; 106
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	9f c0       	rjmp	.+318    	; 0x212 <__prologue_saves__+0xc>
  d4:	ec 01       	movw	r28, r24
  d6:	68 81       	ld	r22, Y
  d8:	79 81       	ldd	r23, Y+1	; 0x01
  da:	8a 81       	ldd	r24, Y+2	; 0x02
  dc:	9b 81       	ldd	r25, Y+3	; 0x03
  de:	61 15       	cp	r22, r1
  e0:	71 05       	cpc	r23, r1
  e2:	81 05       	cpc	r24, r1
  e4:	91 05       	cpc	r25, r1
  e6:	21 f4       	brne	.+8      	; 0xf0 <do_rand+0x26>
  e8:	64 e2       	ldi	r22, 0x24	; 36
  ea:	79 ed       	ldi	r23, 0xD9	; 217
  ec:	8b e5       	ldi	r24, 0x5B	; 91
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	2d e1       	ldi	r18, 0x1D	; 29
  f2:	33 ef       	ldi	r19, 0xF3	; 243
  f4:	41 e0       	ldi	r20, 0x01	; 1
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	4d d0       	rcall	.+154    	; 0x194 <__divmodsi4>
  fa:	49 01       	movw	r8, r18
  fc:	5a 01       	movw	r10, r20
  fe:	27 ea       	ldi	r18, 0xA7	; 167
 100:	31 e4       	ldi	r19, 0x41	; 65
 102:	40 e0       	ldi	r20, 0x00	; 0
 104:	50 e0       	ldi	r21, 0x00	; 0
 106:	62 d0       	rcall	.+196    	; 0x1cc <__mulsidi3>
 108:	69 01       	movw	r12, r18
 10a:	7a 01       	movw	r14, r20
 10c:	c5 01       	movw	r24, r10
 10e:	b4 01       	movw	r22, r8
 110:	2c ee       	ldi	r18, 0xEC	; 236
 112:	34 ef       	ldi	r19, 0xF4	; 244
 114:	4f ef       	ldi	r20, 0xFF	; 255
 116:	5f ef       	ldi	r21, 0xFF	; 255
 118:	59 d0       	rcall	.+178    	; 0x1cc <__mulsidi3>
 11a:	89 01       	movw	r16, r18
 11c:	9a 01       	movw	r18, r20
 11e:	d7 01       	movw	r26, r14
 120:	c6 01       	movw	r24, r12
 122:	80 0f       	add	r24, r16
 124:	91 1f       	adc	r25, r17
 126:	a2 1f       	adc	r26, r18
 128:	b3 1f       	adc	r27, r19
 12a:	b7 ff       	sbrs	r27, 7
 12c:	03 c0       	rjmp	.+6      	; 0x134 <do_rand+0x6a>
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	a1 09       	sbc	r26, r1
 132:	b0 48       	sbci	r27, 0x80	; 128
 134:	88 83       	st	Y, r24
 136:	99 83       	std	Y+1, r25	; 0x01
 138:	aa 83       	std	Y+2, r26	; 0x02
 13a:	bb 83       	std	Y+3, r27	; 0x03
 13c:	9f 77       	andi	r25, 0x7F	; 127
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	ec e0       	ldi	r30, 0x0C	; 12
 144:	82 c0       	rjmp	.+260    	; 0x24a <__epilogue_restores__+0xc>

00000146 <rand_r>:
 146:	c1 df       	rcall	.-126    	; 0xca <do_rand>
 148:	08 95       	ret

0000014a <rand>:
 14a:	80 e6       	ldi	r24, 0x60	; 96
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	bd df       	rcall	.-134    	; 0xca <do_rand>
 150:	08 95       	ret

00000152 <srand>:
 152:	a0 e0       	ldi	r26, 0x00	; 0
 154:	b0 e0       	ldi	r27, 0x00	; 0
 156:	80 93 60 00 	sts	0x0060, r24
 15a:	90 93 61 00 	sts	0x0061, r25
 15e:	a0 93 62 00 	sts	0x0062, r26
 162:	b0 93 63 00 	sts	0x0063, r27
 166:	08 95       	ret

00000168 <__eerd_byte_tn45>:
 168:	e1 99       	sbic	0x1c, 1	; 28
 16a:	fe cf       	rjmp	.-4      	; 0x168 <__eerd_byte_tn45>
 16c:	1f ba       	out	0x1f, r1	; 31
 16e:	8e bb       	out	0x1e, r24	; 30
 170:	e0 9a       	sbi	0x1c, 0	; 28
 172:	99 27       	eor	r25, r25
 174:	8d b3       	in	r24, 0x1d	; 29
 176:	08 95       	ret

00000178 <__eewr_byte_tn45>:
 178:	26 2f       	mov	r18, r22

0000017a <__eewr_r18_tn45>:
 17a:	e1 99       	sbic	0x1c, 1	; 28
 17c:	fe cf       	rjmp	.-4      	; 0x17a <__eewr_r18_tn45>
 17e:	1c ba       	out	0x1c, r1	; 28
 180:	1f ba       	out	0x1f, r1	; 31
 182:	8e bb       	out	0x1e, r24	; 30
 184:	2d bb       	out	0x1d, r18	; 29
 186:	0f b6       	in	r0, 0x3f	; 63
 188:	f8 94       	cli
 18a:	e2 9a       	sbi	0x1c, 2	; 28
 18c:	e1 9a       	sbi	0x1c, 1	; 28
 18e:	0f be       	out	0x3f, r0	; 63
 190:	01 96       	adiw	r24, 0x01	; 1
 192:	08 95       	ret

00000194 <__divmodsi4>:
 194:	05 2e       	mov	r0, r21
 196:	97 fb       	bst	r25, 7
 198:	16 f4       	brtc	.+4      	; 0x19e <__divmodsi4+0xa>
 19a:	00 94       	com	r0
 19c:	0f d0       	rcall	.+30     	; 0x1bc <__negsi2>
 19e:	57 fd       	sbrc	r21, 7
 1a0:	05 d0       	rcall	.+10     	; 0x1ac <__divmodsi4_neg2>
 1a2:	68 d0       	rcall	.+208    	; 0x274 <__udivmodsi4>
 1a4:	07 fc       	sbrc	r0, 7
 1a6:	02 d0       	rcall	.+4      	; 0x1ac <__divmodsi4_neg2>
 1a8:	46 f4       	brtc	.+16     	; 0x1ba <__divmodsi4_exit>
 1aa:	08 c0       	rjmp	.+16     	; 0x1bc <__negsi2>

000001ac <__divmodsi4_neg2>:
 1ac:	50 95       	com	r21
 1ae:	40 95       	com	r20
 1b0:	30 95       	com	r19
 1b2:	21 95       	neg	r18
 1b4:	3f 4f       	sbci	r19, 0xFF	; 255
 1b6:	4f 4f       	sbci	r20, 0xFF	; 255
 1b8:	5f 4f       	sbci	r21, 0xFF	; 255

000001ba <__divmodsi4_exit>:
 1ba:	08 95       	ret

000001bc <__negsi2>:
 1bc:	90 95       	com	r25
 1be:	80 95       	com	r24
 1c0:	70 95       	com	r23
 1c2:	61 95       	neg	r22
 1c4:	7f 4f       	sbci	r23, 0xFF	; 255
 1c6:	8f 4f       	sbci	r24, 0xFF	; 255
 1c8:	9f 4f       	sbci	r25, 0xFF	; 255
 1ca:	08 95       	ret

000001cc <__mulsidi3>:
 1cc:	68 94       	set
 1ce:	00 13       	cpse	r16, r16

000001d0 <__umulsidi3>:
 1d0:	e8 94       	clt
 1d2:	a0 e0       	ldi	r26, 0x00	; 0
 1d4:	b0 e0       	ldi	r27, 0x00	; 0
 1d6:	ee ee       	ldi	r30, 0xEE	; 238
 1d8:	f0 e0       	ldi	r31, 0x00	; 0
 1da:	1d c0       	rjmp	.+58     	; 0x216 <__prologue_saves__+0x10>
 1dc:	ef ef       	ldi	r30, 0xFF	; 255
 1de:	e7 f9       	bld	r30, 7
 1e0:	59 01       	movw	r10, r18
 1e2:	6a 01       	movw	r12, r20
 1e4:	5e 23       	and	r21, r30
 1e6:	55 0f       	add	r21, r21
 1e8:	ee 08       	sbc	r14, r14
 1ea:	fe 2c       	mov	r15, r14
 1ec:	87 01       	movw	r16, r14
 1ee:	9b 01       	movw	r18, r22
 1f0:	ac 01       	movw	r20, r24
 1f2:	9e 23       	and	r25, r30
 1f4:	99 0f       	add	r25, r25
 1f6:	66 0b       	sbc	r22, r22
 1f8:	76 2f       	mov	r23, r22
 1fa:	cb 01       	movw	r24, r22
 1fc:	5d d0       	rcall	.+186    	; 0x2b8 <__muldi3>
 1fe:	cd b7       	in	r28, 0x3d	; 61
 200:	de b7       	in	r29, 0x3e	; 62
 202:	ea e0       	ldi	r30, 0x0A	; 10
 204:	24 c0       	rjmp	.+72     	; 0x24e <__epilogue_restores__+0x10>

00000206 <__prologue_saves__>:
 206:	2f 92       	push	r2
 208:	3f 92       	push	r3
 20a:	4f 92       	push	r4
 20c:	5f 92       	push	r5
 20e:	6f 92       	push	r6
 210:	7f 92       	push	r7
 212:	8f 92       	push	r8
 214:	9f 92       	push	r9
 216:	af 92       	push	r10
 218:	bf 92       	push	r11
 21a:	cf 92       	push	r12
 21c:	df 92       	push	r13
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	cf 93       	push	r28
 228:	df 93       	push	r29
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	ca 1b       	sub	r28, r26
 230:	db 0b       	sbc	r29, r27
 232:	0f b6       	in	r0, 0x3f	; 63
 234:	f8 94       	cli
 236:	de bf       	out	0x3e, r29	; 62
 238:	0f be       	out	0x3f, r0	; 63
 23a:	cd bf       	out	0x3d, r28	; 61
 23c:	09 94       	ijmp

0000023e <__epilogue_restores__>:
 23e:	2a 88       	ldd	r2, Y+18	; 0x12
 240:	39 88       	ldd	r3, Y+17	; 0x11
 242:	48 88       	ldd	r4, Y+16	; 0x10
 244:	5f 84       	ldd	r5, Y+15	; 0x0f
 246:	6e 84       	ldd	r6, Y+14	; 0x0e
 248:	7d 84       	ldd	r7, Y+13	; 0x0d
 24a:	8c 84       	ldd	r8, Y+12	; 0x0c
 24c:	9b 84       	ldd	r9, Y+11	; 0x0b
 24e:	aa 84       	ldd	r10, Y+10	; 0x0a
 250:	b9 84       	ldd	r11, Y+9	; 0x09
 252:	c8 84       	ldd	r12, Y+8	; 0x08
 254:	df 80       	ldd	r13, Y+7	; 0x07
 256:	ee 80       	ldd	r14, Y+6	; 0x06
 258:	fd 80       	ldd	r15, Y+5	; 0x05
 25a:	0c 81       	ldd	r16, Y+4	; 0x04
 25c:	1b 81       	ldd	r17, Y+3	; 0x03
 25e:	aa 81       	ldd	r26, Y+2	; 0x02
 260:	b9 81       	ldd	r27, Y+1	; 0x01
 262:	ce 0f       	add	r28, r30
 264:	d1 1d       	adc	r29, r1
 266:	0f b6       	in	r0, 0x3f	; 63
 268:	f8 94       	cli
 26a:	de bf       	out	0x3e, r29	; 62
 26c:	0f be       	out	0x3f, r0	; 63
 26e:	cd bf       	out	0x3d, r28	; 61
 270:	ed 01       	movw	r28, r26
 272:	08 95       	ret

00000274 <__udivmodsi4>:
 274:	a1 e2       	ldi	r26, 0x21	; 33
 276:	1a 2e       	mov	r1, r26
 278:	aa 1b       	sub	r26, r26
 27a:	bb 1b       	sub	r27, r27
 27c:	fd 01       	movw	r30, r26
 27e:	0d c0       	rjmp	.+26     	; 0x29a <__udivmodsi4_ep>

00000280 <__udivmodsi4_loop>:
 280:	aa 1f       	adc	r26, r26
 282:	bb 1f       	adc	r27, r27
 284:	ee 1f       	adc	r30, r30
 286:	ff 1f       	adc	r31, r31
 288:	a2 17       	cp	r26, r18
 28a:	b3 07       	cpc	r27, r19
 28c:	e4 07       	cpc	r30, r20
 28e:	f5 07       	cpc	r31, r21
 290:	20 f0       	brcs	.+8      	; 0x29a <__udivmodsi4_ep>
 292:	a2 1b       	sub	r26, r18
 294:	b3 0b       	sbc	r27, r19
 296:	e4 0b       	sbc	r30, r20
 298:	f5 0b       	sbc	r31, r21

0000029a <__udivmodsi4_ep>:
 29a:	66 1f       	adc	r22, r22
 29c:	77 1f       	adc	r23, r23
 29e:	88 1f       	adc	r24, r24
 2a0:	99 1f       	adc	r25, r25
 2a2:	1a 94       	dec	r1
 2a4:	69 f7       	brne	.-38     	; 0x280 <__udivmodsi4_loop>
 2a6:	60 95       	com	r22
 2a8:	70 95       	com	r23
 2aa:	80 95       	com	r24
 2ac:	90 95       	com	r25
 2ae:	9b 01       	movw	r18, r22
 2b0:	ac 01       	movw	r20, r24
 2b2:	bd 01       	movw	r22, r26
 2b4:	cf 01       	movw	r24, r30
 2b6:	08 95       	ret

000002b8 <__muldi3>:
 2b8:	df 93       	push	r29
 2ba:	cf 93       	push	r28
 2bc:	9f 92       	push	r9
 2be:	a0 e4       	ldi	r26, 0x40	; 64
 2c0:	9a 2e       	mov	r9, r26
 2c2:	00 24       	eor	r0, r0
 2c4:	d0 01       	movw	r26, r0
 2c6:	e0 01       	movw	r28, r0
 2c8:	f0 01       	movw	r30, r0
 2ca:	16 95       	lsr	r17
 2cc:	07 95       	ror	r16
 2ce:	f7 94       	ror	r15
 2d0:	e7 94       	ror	r14
 2d2:	d7 94       	ror	r13
 2d4:	c7 94       	ror	r12
 2d6:	b7 94       	ror	r11
 2d8:	a7 94       	ror	r10
 2da:	48 f4       	brcc	.+18     	; 0x2ee <__muldi3+0x36>
 2dc:	10 68       	ori	r17, 0x80	; 128
 2de:	a2 0f       	add	r26, r18
 2e0:	b3 1f       	adc	r27, r19
 2e2:	c4 1f       	adc	r28, r20
 2e4:	d5 1f       	adc	r29, r21
 2e6:	e6 1f       	adc	r30, r22
 2e8:	f7 1f       	adc	r31, r23
 2ea:	08 1e       	adc	r0, r24
 2ec:	19 1e       	adc	r1, r25
 2ee:	22 0f       	add	r18, r18
 2f0:	33 1f       	adc	r19, r19
 2f2:	44 1f       	adc	r20, r20
 2f4:	55 1f       	adc	r21, r21
 2f6:	66 1f       	adc	r22, r22
 2f8:	77 1f       	adc	r23, r23
 2fa:	88 1f       	adc	r24, r24
 2fc:	99 1f       	adc	r25, r25
 2fe:	9a 94       	dec	r9
 300:	21 f7       	brne	.-56     	; 0x2ca <__muldi3+0x12>
 302:	9d 01       	movw	r18, r26
 304:	ae 01       	movw	r20, r28
 306:	bf 01       	movw	r22, r30
 308:	c0 01       	movw	r24, r0
 30a:	11 24       	eor	r1, r1
 30c:	9f 90       	pop	r9
 30e:	cf 91       	pop	r28
 310:	df 91       	pop	r29
 312:	08 95       	ret

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
