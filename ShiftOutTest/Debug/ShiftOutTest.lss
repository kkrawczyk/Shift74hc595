
ShiftOutTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  00000256  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  00000256  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000000c8  00000000  00000000  00000286  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000090a  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000431  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000484  00000000  00000000  00001089  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000164  00000000  00000000  00001510  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002bf  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000387  00000000  00000000  00001933  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000088  00000000  00000000  00001cba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	1b c0       	rjmp	.+54     	; 0x3e <__bad_interrupt>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	a3 36       	cpi	r26, 0x63	; 99
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	cb d0       	rcall	.+406    	; 0x1d2 <main>
  3c:	d0 c0       	rjmp	.+416    	; 0x1de <_exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <getNthByte>:
 */ 

#include "ByteOperations.h"

uint8_t getNthByte(uint8_t number, uint8_t bit){
	uint8_t masked_n = number & (1 << bit);
  40:	21 e0       	ldi	r18, 0x01	; 1
  42:	30 e0       	ldi	r19, 0x00	; 0
  44:	06 2e       	mov	r0, r22
  46:	02 c0       	rjmp	.+4      	; 0x4c <getNthByte+0xc>
  48:	22 0f       	add	r18, r18
  4a:	33 1f       	adc	r19, r19
  4c:	0a 94       	dec	r0
  4e:	e2 f7       	brpl	.-8      	; 0x48 <getNthByte+0x8>
  50:	82 23       	and	r24, r18
	return masked_n >> bit;
  52:	28 2f       	mov	r18, r24
  54:	30 e0       	ldi	r19, 0x00	; 0
  56:	c9 01       	movw	r24, r18
  58:	02 c0       	rjmp	.+4      	; 0x5e <getNthByte+0x1e>
  5a:	95 95       	asr	r25
  5c:	87 95       	ror	r24
  5e:	6a 95       	dec	r22
  60:	e2 f7       	brpl	.-8      	; 0x5a <getNthByte+0x1a>
}
  62:	08 95       	ret

00000064 <setNthByteHigh>:

void setNthByteHigh(uint8_t *number, uint8_t bit){
	*number = (uint8_t)*number |1 << bit;
  64:	21 e0       	ldi	r18, 0x01	; 1
  66:	30 e0       	ldi	r19, 0x00	; 0
  68:	a9 01       	movw	r20, r18
  6a:	02 c0       	rjmp	.+4      	; 0x70 <setNthByteHigh+0xc>
  6c:	44 0f       	add	r20, r20
  6e:	55 1f       	adc	r21, r21
  70:	6a 95       	dec	r22
  72:	e2 f7       	brpl	.-8      	; 0x6c <setNthByteHigh+0x8>
  74:	ba 01       	movw	r22, r20
  76:	fc 01       	movw	r30, r24
  78:	20 81       	ld	r18, Z
  7a:	62 2b       	or	r22, r18
  7c:	60 83       	st	Z, r22
  7e:	08 95       	ret

00000080 <setNthByteLow>:
}

void setNthByteLow(uint8_t *number, uint8_t bit){
	*number = (uint8_t)*number & ~(1 << bit);
  80:	21 e0       	ldi	r18, 0x01	; 1
  82:	30 e0       	ldi	r19, 0x00	; 0
  84:	a9 01       	movw	r20, r18
  86:	02 c0       	rjmp	.+4      	; 0x8c <setNthByteLow+0xc>
  88:	44 0f       	add	r20, r20
  8a:	55 1f       	adc	r21, r21
  8c:	6a 95       	dec	r22
  8e:	e2 f7       	brpl	.-8      	; 0x88 <setNthByteLow+0x8>
  90:	ba 01       	movw	r22, r20
  92:	60 95       	com	r22
  94:	fc 01       	movw	r30, r24
  96:	20 81       	ld	r18, Z
  98:	62 23       	and	r22, r18
  9a:	60 83       	st	Z, r22
  9c:	08 95       	ret

0000009e <setLcdFunctions>:
	setLcdPin(LCD_RW,0x00);
	setLcdPin(LCD_ENABLE,0x00);
}

void setLcdFunctions(uint8_t func){
	lcdFunctions |= func;
  9e:	90 91 60 00 	lds	r25, 0x0060
  a2:	89 2b       	or	r24, r25
  a4:	80 93 60 00 	sts	0x0060, r24
  a8:	08 95       	ret

000000aa <setLcdPin>:
}

void setLcdPin(uint8_t pin,uint8_t val){
	if(val==0){
  aa:	61 11       	cpse	r22, r1
  ac:	05 c0       	rjmp	.+10     	; 0xb8 <setLcdPin+0xe>
		setNthByteLow(&lcdCurrentPins,pin);
  ae:	68 2f       	mov	r22, r24
  b0:	82 e6       	ldi	r24, 0x62	; 98
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	e5 df       	rcall	.-54     	; 0x80 <setNthByteLow>
  b6:	04 c0       	rjmp	.+8      	; 0xc0 <setLcdPin+0x16>
	}else{
		setNthByteHigh(&lcdCurrentPins,pin);
  b8:	68 2f       	mov	r22, r24
  ba:	82 e6       	ldi	r24, 0x62	; 98
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	d2 df       	rcall	.-92     	; 0x64 <setNthByteHigh>
	}
	writeBytes(lcdCurrentPins);
  c0:	80 91 62 00 	lds	r24, 0x0062
  c4:	83 d0       	rcall	.+262    	; 0x1cc <writeBytes>
  c6:	08 95       	ret

000000c8 <initLcd>:
 */ 

#include "LCDShift.h"

void initLcd(){
	initShift();
  c8:	5a d0       	rcall	.+180    	; 0x17e <initShift>
	lcdFunctions = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
  ca:	10 92 60 00 	sts	0x0060, r1
	lcdCurrentPins = 0x00;
  ce:	10 92 62 00 	sts	0x0062, r1
	lcdCurrentLine = 0;
  d2:	10 92 61 00 	sts	0x0061, r1
	setLcdFunctions(LCD_2LINE);
  d6:	88 e0       	ldi	r24, 0x08	; 8
  d8:	e2 df       	rcall	.-60     	; 0x9e <setLcdFunctions>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	8f e2       	ldi	r24, 0x2F	; 47
  dc:	95 e7       	ldi	r25, 0x75	; 117
  de:	01 97       	sbiw	r24, 0x01	; 1
  e0:	f1 f7       	brne	.-4      	; 0xde <initLcd+0x16>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <initLcd+0x1c>
  e4:	00 00       	nop
	
	//Wait before sending commands to LCD! 
	_delay_ms(100);
	setLcdPin(LCD_RS,0x00);
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	87 e0       	ldi	r24, 0x07	; 7
  ea:	df df       	rcall	.-66     	; 0xaa <setLcdPin>
	setLcdPin(LCD_RW,0x00);
  ec:	60 e0       	ldi	r22, 0x00	; 0
  ee:	86 e0       	ldi	r24, 0x06	; 6
  f0:	dc df       	rcall	.-72     	; 0xaa <setLcdPin>
	setLcdPin(LCD_ENABLE,0x00);
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	85 e0       	ldi	r24, 0x05	; 5
  f6:	d9 df       	rcall	.-78     	; 0xaa <setLcdPin>
  f8:	08 95       	ret

000000fa <lcdWrite4Bits>:
	setLcdPin(LCD_RW,0);
	    //write4bits(value>>4);
	    //write4bits(value);
}

void lcdWrite4Bits(uint8_t value){
  fa:	af 92       	push	r10
  fc:	bf 92       	push	r11
  fe:	cf 92       	push	r12
 100:	df 92       	push	r13
 102:	ef 92       	push	r14
 104:	ff 92       	push	r15
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	a8 2e       	mov	r10, r24
	for (int i = 0; i < 8; i++) {
 110:	c0 e0       	ldi	r28, 0x00	; 0
 112:	d0 e0       	ldi	r29, 0x00	; 0
		uint8_t tmp = getNthByte(value,i);
		uint8_t tmp2 = (value >> i) & 0x01;
 114:	e8 2e       	mov	r14, r24
 116:	f1 2c       	mov	r15, r1
	    //write4bits(value);
}

void lcdWrite4Bits(uint8_t value){
	for (int i = 0; i < 8; i++) {
		uint8_t tmp = getNthByte(value,i);
 118:	6c 2f       	mov	r22, r28
 11a:	8a 2d       	mov	r24, r10
 11c:	91 df       	rcall	.-222    	; 0x40 <getNthByte>
 11e:	b8 2e       	mov	r11, r24
		uint8_t tmp2 = (value >> i) & 0x01;
 120:	87 01       	movw	r16, r14
 122:	0c 2e       	mov	r0, r28
 124:	02 c0       	rjmp	.+4      	; 0x12a <lcdWrite4Bits+0x30>
 126:	15 95       	asr	r17
 128:	07 95       	ror	r16
 12a:	0a 94       	dec	r0
 12c:	e2 f7       	brpl	.-8      	; 0x126 <lcdWrite4Bits+0x2c>
 12e:	80 2f       	mov	r24, r16
 130:	81 70       	andi	r24, 0x01	; 1
 132:	d8 2e       	mov	r13, r24
		uint8_t tmp3 = (value >> i);
		uint8_t tmp4 = tmp3 & 0x01;
		if(tmp4==1){
 134:	cd 2c       	mov	r12, r13
 136:	00 ff       	sbrs	r16, 0
 138:	04 c0       	rjmp	.+8      	; 0x142 <lcdWrite4Bits+0x48>
			setLcdPin(LCD_RS,tmp2);
 13a:	6d 2d       	mov	r22, r13
 13c:	87 e0       	ldi	r24, 0x07	; 7
 13e:	b5 df       	rcall	.-150    	; 0xaa <setLcdPin>
 140:	03 c0       	rjmp	.+6      	; 0x148 <lcdWrite4Bits+0x4e>
		}else{
			setLcdPin(LCD_RS,tmp2);
 142:	6d 2d       	mov	r22, r13
 144:	87 e0       	ldi	r24, 0x07	; 7
 146:	b1 df       	rcall	.-158    	; 0xaa <setLcdPin>
		}
		setLcdPin(LCD_ENABLE,tmp);
 148:	6b 2d       	mov	r22, r11
 14a:	85 e0       	ldi	r24, 0x05	; 5
 14c:	ae df       	rcall	.-164    	; 0xaa <setLcdPin>
		setLcdPin(LCD_RS,tmp2);
 14e:	6d 2d       	mov	r22, r13
 150:	87 e0       	ldi	r24, 0x07	; 7
 152:	ab df       	rcall	.-170    	; 0xaa <setLcdPin>
		setLcdPin(LCD_RS,tmp3);
 154:	60 2f       	mov	r22, r16
 156:	87 e0       	ldi	r24, 0x07	; 7
 158:	a8 df       	rcall	.-176    	; 0xaa <setLcdPin>
		setLcdPin(LCD_RS,tmp4);
 15a:	6c 2d       	mov	r22, r12
 15c:	87 e0       	ldi	r24, 0x07	; 7
 15e:	a5 df       	rcall	.-182    	; 0xaa <setLcdPin>
	    //write4bits(value>>4);
	    //write4bits(value);
}

void lcdWrite4Bits(uint8_t value){
	for (int i = 0; i < 8; i++) {
 160:	21 96       	adiw	r28, 0x01	; 1
 162:	c8 30       	cpi	r28, 0x08	; 8
 164:	d1 05       	cpc	r29, r1
 166:	c1 f6       	brne	.-80     	; 0x118 <lcdWrite4Bits+0x1e>
		  pinMode(_data_pins[i], OUTPUT);
		  digitalWrite(_data_pins[i], (value >> i) & 0x01);
	  }*/
	  
	  //pulseEnable();
}
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	ff 90       	pop	r15
 172:	ef 90       	pop	r14
 174:	df 90       	pop	r13
 176:	cf 90       	pop	r12
 178:	bf 90       	pop	r11
 17a:	af 90       	pop	r10
 17c:	08 95       	ret

0000017e <initShift>:
*/

#include "Shift74hc595.h"

void initShift(){
	DDRB |= (1 << SHIFT_LATCH);
 17e:	b8 9a       	sbi	0x17, 0	; 23
	DDRB |= (1 << SHIFT_CLCK);
 180:	b9 9a       	sbi	0x17, 1	; 23
	DDRB |= (1 << SHIFT_DATA);
 182:	ba 9a       	sbi	0x17, 2	; 23
	
	PORTB &= ~(1 << SHIFT_LATCH);
 184:	c0 98       	cbi	0x18, 0	; 24
	PORTB &= ~(1 << SHIFT_CLCK);
 186:	c1 98       	cbi	0x18, 1	; 24
	PORTB &= ~(1 << SHIFT_DATA);
 188:	c2 98       	cbi	0x18, 2	; 24
 18a:	08 95       	ret

0000018c <writeBytesRCLK>:

void writeBytes(uint8_t value){
	writeBytesRCLK(value,0x01);
}

void writeBytesRCLK(uint8_t value, uint8_t pushRCLK){
 18c:	1f 93       	push	r17
 18e:	cf 93       	push	r28
 190:	df 93       	push	r29
 192:	d8 2f       	mov	r29, r24
 194:	16 2f       	mov	r17, r22
	if(pushRCLK==1){
 196:	61 30       	cpi	r22, 0x01	; 1
 198:	99 f4       	brne	.+38     	; 0x1c0 <writeBytesRCLK+0x34>
		PORTB &= ~(1 << SHIFT_LATCH);
 19a:	c0 98       	cbi	0x18, 0	; 24
 19c:	11 c0       	rjmp	.+34     	; 0x1c0 <writeBytesRCLK+0x34>
	}
	for(uint8_t i=0;i<8;i++){
		PORTB &= ~(1 << SHIFT_CLCK);
 19e:	c1 98       	cbi	0x18, 1	; 24
		if(getNthByte(value,i)==0){
 1a0:	6c 2f       	mov	r22, r28
 1a2:	8d 2f       	mov	r24, r29
 1a4:	4d df       	rcall	.-358    	; 0x40 <getNthByte>
 1a6:	81 11       	cpse	r24, r1
 1a8:	02 c0       	rjmp	.+4      	; 0x1ae <writeBytesRCLK+0x22>
			PORTB &= ~(1 << SHIFT_DATA);
 1aa:	c2 98       	cbi	0x18, 2	; 24
 1ac:	01 c0       	rjmp	.+2      	; 0x1b0 <writeBytesRCLK+0x24>
			}else{
			PORTB |= (1 << SHIFT_DATA);
 1ae:	c2 9a       	sbi	0x18, 2	; 24
		}
		PORTB |= (1 << SHIFT_CLCK);
 1b0:	c1 9a       	sbi	0x18, 1	; 24

void writeBytesRCLK(uint8_t value, uint8_t pushRCLK){
	if(pushRCLK==1){
		PORTB &= ~(1 << SHIFT_LATCH);
	}
	for(uint8_t i=0;i<8;i++){
 1b2:	cf 5f       	subi	r28, 0xFF	; 255
 1b4:	c8 30       	cpi	r28, 0x08	; 8
 1b6:	99 f7       	brne	.-26     	; 0x19e <writeBytesRCLK+0x12>
			}else{
			PORTB |= (1 << SHIFT_DATA);
		}
		PORTB |= (1 << SHIFT_CLCK);
	}
	if(pushRCLK==1){
 1b8:	11 30       	cpi	r17, 0x01	; 1
 1ba:	21 f4       	brne	.+8      	; 0x1c4 <writeBytesRCLK+0x38>
		PORTB |= (1 << SHIFT_LATCH);
 1bc:	c0 9a       	sbi	0x18, 0	; 24
 1be:	02 c0       	rjmp	.+4      	; 0x1c4 <writeBytesRCLK+0x38>

void writeBytes(uint8_t value){
	writeBytesRCLK(value,0x01);
}

void writeBytesRCLK(uint8_t value, uint8_t pushRCLK){
 1c0:	c0 e0       	ldi	r28, 0x00	; 0
 1c2:	ed cf       	rjmp	.-38     	; 0x19e <writeBytesRCLK+0x12>
		PORTB |= (1 << SHIFT_CLCK);
	}
	if(pushRCLK==1){
		PORTB |= (1 << SHIFT_LATCH);
	}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	08 95       	ret

000001cc <writeBytes>:
	PORTB &= ~(1 << SHIFT_CLCK);
	PORTB &= ~(1 << SHIFT_DATA);
}

void writeBytes(uint8_t value){
	writeBytesRCLK(value,0x01);
 1cc:	61 e0       	ldi	r22, 0x01	; 1
 1ce:	de df       	rcall	.-68     	; 0x18c <writeBytesRCLK>
 1d0:	08 95       	ret

000001d2 <main>:
	eeprom_write_byte(&sstate, rand());
}*/

int main(void)
{
	initLcd();
 1d2:	7a df       	rcall	.-268    	; 0xc8 <initLcd>
	lcdWrite4Bits(128);
 1d4:	80 e8       	ldi	r24, 0x80	; 128
 1d6:	91 df       	rcall	.-222    	; 0xfa <lcdWrite4Bits>
	{
		writeBytes(63);
		_delay_ms(1000);
	}*/
	return 0;
}
 1d8:	80 e0       	ldi	r24, 0x00	; 0
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	08 95       	ret

000001de <_exit>:
 1de:	f8 94       	cli

000001e0 <__stop_program>:
 1e0:	ff cf       	rjmp	.-2      	; 0x1e0 <__stop_program>
